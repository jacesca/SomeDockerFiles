1. The Docker Engine
00:00 - 00:18
Docker is an open-source tool that allows us to create, run and manage containers. Docker first launched in 2013, and even though containers had existed for more than a decade, it was with the launch of Docker that containers exploded in popularity.

2. Docker ecosystem
00:18 - 00:46
Over time, Docker has grown to be part of a large ecosystem of tools around containers; we will focus on Docker Engine, which is everything you need to create, run and manage containers. Other parts of this ecosystem are, for example, Docker Compose, a tool for defining and running multi-container Docker applications, and Kubernetes, a system for container scheduling and management.

3. Docker Engine
00:46 - 01:31
Docker Engine has two main parts: server and client. The client, called Docker client, is a command line interface used to talk to the server. The server is a background process that requires no user interaction, which is called a daemon, a term we will encounter repeatedly to reference the Docker server. In addition to the Docker client and daemon, Docker Engine also includes so-called API specifications, which define how you can interact with the Docker Daemon. These APIs are not only used by the Docker client to talk to the daemon but also specify how other applications can work with the daemon.

1 https://docs.docker.com/engine/
4. The Docker daemon
01:31 - 01:58
The Docker daemon is responsible for managing all Docker objects, such as images, containers, and more. However, we can't directly tell the daemon what to do; we need a client to give us a human-usable interface to it. Here the Docker command line interface is the default option, but there are others, like Docker Desktop, which gives us a Graphical User Interface to manage our containers.

1 https://docs.docker.com/engine/
2 https://docs.docker.com/get-started/overview/#docker-architecture
5. Images and Containers
01:58 - 02:34
The daemon manages both images and containers, but there is a difference between them. While an image is a blueprint or recipe, like an idle copy of a hard drive with all the software we want to run, a container is a running image, like a copy of that same hard drive plugged into a running computer. We could create an image with Ubuntu and python3 point 9 installed. Once we start this image, we'll have a running container with Ubuntu and python3 point 9 where we can execute our code.

1 https://docs.docker.com/engine/
2 https://docs.docker.com/get-started/overview/#docker-architecture
6. Containers are processes
02:34 - 03:00
Up until now, we talked about containers abstractly. To better understand containers, we can think of them as processes. When we start a container, a process is started, just as when we start a text editor, Spotify, or any other application. What makes a container process different is its permissions to resources like the file system, memory, and network.

7. Containers are processes
03:00 - 03:20
For many resources of a container process, not only is access restricted, but they are also undetectable to the process. For example, instead of seeing all the files on your hard drive, the process is given access to only a single folder and cannot see files outside of that folder.

8. Containers are isolated processes
03:20 - 04:14
Not only blocking access to but also hiding resources may seem like a small difference, but it allows running a process that is isolated from the rest of the machine. This lets an entirely separate operating system run inside the process. A container runs its own operating system instead of using the host operating system. The Docker daemon ensures that the OS running in the container is unaware of other containers and the host OS. The operating system inside the container can start and manage it's own processes without interfering with any processes running on the host OS. In other words the operating system in the container is separated and kept unaware of anything happening outside itself, isolated from anything on the host and other containers.

9. Let's practice!
04:14 - 04:21
Let's ingrain our understanding of the Docker ecosystem and Docker Engine with some exercises!