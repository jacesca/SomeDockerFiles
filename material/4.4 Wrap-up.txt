1. Wrap-up
00:00 - 00:10
Well done! You made it all the way to the end of the course. Let's recap what we learned in each chapter and then look at what else there is to learn.

2. Chapter 1: The theoretical foundation
00:10 - 00:48
In chapter one, we saw that containers are portable computing environments containing everything needed to run a workflow or application. They provide security, portability, and reproducibility. Then we dove deeper into Docker specifically by learning about Docker Engine, which is everything we need to create, run and manage containers. Wrapping up the chapter, we saw why the lightweight nature of containers made them gain popularity over virtual machines. To understand why this comparison is valuable, we first had to learn about virtualization, which allows us to run software isolated from each other but on the same hardware.

3. Chapter 2: The Docker CLI
00:48 - 01:12
Chapter two is where we finally got our hands dirty. We went from starting our first container to running containers in several different ways, looking at container logs, managing several containers, and cleaning everything up again. Once we knew how to work with containers, we could learn more about images, where to get them, how they are versioned, and how we can share them with others.

4. Chapter 3: Dockerfiles
01:12 - 01:44
After seeing how to manage images, it was time to build our own in chapter three. Creating Docker images is done using Dockerfiles and specific instructions made for exactly this goal. We saw all the essential instructions allowing us to specify an image to start from, run shell commands, copy files, and more! At the end of chapter three, we looked in more detail at Docker layers, giving us insight into how Docker creates images and how we can optimize our images and keep them small.

5. Chapter 4: Security and Customization
01:44 - 02:02
In this last chapter, we learned about four Dockerfile instructions that allow us to configure our Dockerfile and images in more complex ways, for example, by setting a user or creating variables that can be configured either while building an image or starting a container.

6. Chapter 4: Security and Customization
02:02 - 02:15
To wrap up, we went over some best practices of container security, start from a trusted image, keep images up to date, only install the software you need, and don't run applications with the root user.

7. What more is there to learn?
02:15 - 03:28
Docker is part of a larger ecosystem of tools around containers and there is much more to learn. There are several more less-used Dockerfile instructions like ENTRYPOINT and HEALTHCHECK, among others, which are still very useful in the right circumstances. Still, in the context of Docker Engine, there is even more to learn, like how to start an image from scratch instead of continuing from an existing image or multi-stage builds, allowing you to create Dockerfiles built on top of multiple other images at once. Other topics not touched upon in this course are networking and volumes, respectively, allowing you to connect containers to a network and access local or saved files in a new way. And last but not least, there are several tools, like Kubernetes and docker-compose, to orchestrate containers. docker-compose allows you to define how a few containers interact, for example, a python container running a pipeline together with a database image the pipeline can connect to. While Kubernetes allows us to start, stop and do anything else imaginable from code.

8. Thank you!
03:28 - 03:41
Once again, congratulations on completing the course, and thank you for choosing to take it. We hope it helps on your journey to using and mastering Docker.