1. Containers and their advantages
00:00 - 00:19
Welcome! My name is Tim, and I’m a software engineer. In this course we’ll give you hands-on experience managing, running, and creating containers. By the end of this course, you’ll be able to use containers in your own workflows and understand when you should.

2. Prerequisites
00:19 - 00:38
Before taking Introduction to Docker, we advise completing the prerequisite course. A basic understanding of how to work with Shell is needed in this course. We'll use nano extensively to edit files, together with several commands to find our way around the file system.

3. Containers
00:38 - 00:59
In this first chapter, we’ll give an introduction to containers, Docker, and give insight into the differences between containers and virtual machines. A container is a portable computing environment. It contains everything needed to run a workflow or application, including dependencies, code, and configuration.

4. Making it less abstract
00:59 - 01:40
We can think of a container like a new computer on which we copy our code or workflow and install all needed dependencies. Once everything is installed and configured, we make backups of that computer. Imagine we could now use that backup on another computer, and everything we installed and configured would work just like it did originally. This backup is similar to a container; both are a packaging of code together with its dependencies (including the operating system) and configuration. That's where the analogy ends since a container has many advantages over something like a backup.

5. Containers run identically every time
01:40 - 02:08
One of the main benefits of containers is that whenever a container is run, the workflow or application it contains will behave identically. That is to say; containers provide reproducibility. Reproducible means we have a container X that gives an output Y; every time it is run, now, in five minutes or two months, for the same input, it will give identical output.

6. Containers run identically everywhere
02:08 - 02:32
The second main benefit of containers is that wherever a container is run, it will behave identically, containers provide portability. Portable means the container will run the same on our computer, your colleague's computer, and the cloud. No risk of removed dependencies, lost configuration files, or other changes that break our application.

7. Isolation
02:32 - 02:59
This is possible because of isolation between the container and the rest of the environment; running a container will have no impact outside of the container and vice versa. Anything happening outside the container will not affect the result of a container. A container has limited resource access to the operating system it is running on; everything else is kept separate.

8. Containers provide security
02:59 - 03:42
Because containers are completely isolated from each other, even if the security of one container is compromised, the other containers on the same host, and the host itself remain secure since there is no direct communication between containers. The compromised container still only has access to limited resources on the host and nothing more. This makes containers not only great for safely deploying applications but also for quickly prototyping workflows. You can be sure that whatever you do in the container won't affect anything outside of it and that you can start with a clean slate at any point.

9. Containers are lightweight
03:42 - 04:13
Containers not only provide security, portability, and reproducibility. An additional advantage of containers is that they are lightweight, or in other words, use few extra resources in comparison to running an application outside of a container. Containers have little overhead compared to alternatives that also provide isolation. This is especially relevant when comparing containers to virtual machines, which we will do in detail later on.

10. Containers and data science
04:13 - 04:43
All these advantages make containers relevant for data science; containers make any task or workflow automatically reproducible not only on our own machine but also everywhere else. Containers help us avoid many issues when sharing our work; dependencies are automatically included, and so are datasets. Most importantly, we can be sure our code will work on our colleague's machine. Additionally, the lightweight nature of containers makes them easier to share than alternatives.

11. Let's practice!
04:43 - 04:52
You now have a grasp on what a container is, its advantages, and why these advantages are relevant in data science. Let's practice!

